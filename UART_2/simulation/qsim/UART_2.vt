// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/28/2020 17:59:23"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    all_uart
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module all_uart_vlg_sample_tst(
	clk,
	CLS_WORD_IN,
	res,
	RX,
	sampler_tx
);
input  clk;
input  CLS_WORD_IN;
input  res;
input  RX;
output sampler_tx;

reg sample;
time current_time;
always @(clk or CLS_WORD_IN or res or RX)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module all_uart_vlg_check_tst (
	CLC_10,
	CLK_50,
	PIN_LED,
	TX,
	sampler_rx
);
input  CLC_10;
input  CLK_50;
input  PIN_LED;
input  TX;
input sampler_rx;

reg  CLC_10_expected;
reg  CLK_50_expected;
reg  PIN_LED_expected;
reg  TX_expected;

reg  CLC_10_prev;
reg  CLK_50_prev;
reg  PIN_LED_prev;
reg  TX_prev;

reg  CLC_10_expected_prev;
reg  CLK_50_expected_prev;

reg  last_CLC_10_exp;
reg  last_CLK_50_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	CLC_10_prev = CLC_10;
	CLK_50_prev = CLK_50;
	PIN_LED_prev = PIN_LED;
	TX_prev = TX;
end

// update expected /o prevs

always @(trigger)
begin
	CLC_10_expected_prev = CLC_10_expected;
	CLK_50_expected_prev = CLK_50_expected;
end



// expected CLC_10
initial
begin
	CLC_10_expected = 1'b0;
end 

// expected CLK_50
initial
begin
	CLK_50_expected = 1'b0;
end 
// generate trigger
always @(CLC_10_expected or CLC_10 or CLK_50_expected or CLK_50 or PIN_LED_expected or PIN_LED or TX_expected or TX)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected CLC_10 = %b | expected CLK_50 = %b | expected PIN_LED = %b | expected TX = %b | ",CLC_10_expected_prev,CLK_50_expected_prev,PIN_LED_expected_prev,TX_expected_prev);
	$display("| real CLC_10 = %b | real CLK_50 = %b | real PIN_LED = %b | real TX = %b | ",CLC_10_prev,CLK_50_prev,PIN_LED_prev,TX_prev);
`endif
	if (
		( CLC_10_expected_prev !== 1'bx ) && ( CLC_10_prev !== CLC_10_expected_prev )
		&& ((CLC_10_expected_prev !== last_CLC_10_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CLC_10 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CLC_10_expected_prev);
		$display ("     Real value = %b", CLC_10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_CLC_10_exp = CLC_10_expected_prev;
	end
	if (
		( CLK_50_expected_prev !== 1'bx ) && ( CLK_50_prev !== CLK_50_expected_prev )
		&& ((CLK_50_expected_prev !== last_CLK_50_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CLK_50 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CLK_50_expected_prev);
		$display ("     Real value = %b", CLK_50_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CLK_50_exp = CLK_50_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module all_uart_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg CLS_WORD_IN;
reg res;
reg RX;
// wires                                               
wire CLC_10;
wire CLK_50;
wire PIN_LED;
wire TX;

wire sampler;                             

// assign statements (if any)                          
all_uart i1 (
// port map - connection between master ports and signals/registers   
	.CLC_10(CLC_10),
	.clk(clk),
	.CLK_50(CLK_50),
	.CLS_WORD_IN(CLS_WORD_IN),
	.PIN_LED(PIN_LED),
	.res(res),
	.RX(RX),
	.TX(TX)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// res
initial
begin
	res = 1'b0;
	res = #640000 1'b1;
end 

all_uart_vlg_sample_tst tb_sample (
	.clk(clk),
	.CLS_WORD_IN(CLS_WORD_IN),
	.res(res),
	.RX(RX),
	.sampler_tx(sampler)
);

all_uart_vlg_check_tst tb_out(
	.CLC_10(CLC_10),
	.CLK_50(CLK_50),
	.PIN_LED(PIN_LED),
	.TX(TX),
	.sampler_rx(sampler)
);
endmodule

